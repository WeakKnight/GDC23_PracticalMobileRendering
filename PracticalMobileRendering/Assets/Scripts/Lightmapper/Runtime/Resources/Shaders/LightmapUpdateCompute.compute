#pragma kernel main
#pragma enable_d3d11_debug_symbols

struct LightmapReceiver
{
	uint uv;
	uint irradiance0;
	uint irradiance1;
	uint irradiance2;
};

float _Intensity0;
float _Intensity1;
float _Intensity2;

Texture2D<float4> _SrcLightmap;
RWTexture2D<float4> _DstLightmap;
StructuredBuffer<LightmapReceiver> _LightmapReceivers;
int _LightmapSize;
int _ReceiverCount;

float2 UnpackUINTToR16G14(uint xy)
{
	const uint mask16Bit = (1u << 16u) - 1u;
	const uint mask14Bit = (1u << 14u) - 1u;
	uint x = xy & mask16Bit;
	uint y = xy >> 14 & mask16Bit;
	return float2(x / (float)mask16Bit, y / (float)mask14Bit);
}

float UnpackR8ToUFLOAT(uint r)
{
	const uint mask = (1U << 8) - 1U;
	return (float)(r & mask) / (float)mask;
}

float4 UnpackR8G8B8A8ToUFLOAT(uint rgba)
{
	float r = UnpackR8ToUFLOAT(rgba);
	float g = UnpackR8ToUFLOAT(rgba >> 8);
	float b = UnpackR8ToUFLOAT(rgba >> 16);
	float a = UnpackR8ToUFLOAT(rgba >> 24);
	return float4(r, g, b, a);
}

float3 RGBMDecode(float4 rgbm)
{
	float3 result = 6.0f * rgbm.rgb * rgbm.a;
	return result * result;
}

[numthreads(64, 1, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= (uint)_ReceiverCount)
	{
		return;
	}

	LightmapReceiver receiver = _LightmapReceivers[id.x];
	float2 uv = UnpackUINTToR16G14(receiver.uv);
	//uv.x = 1.0f - uv.x;
	uv.y = 1.0f - uv.y;

	uint2 dstLocation = float2(_LightmapSize, _LightmapSize) * uv;
	float3 dstIrradiance0 = RGBMDecode(UnpackR8G8B8A8ToUFLOAT(receiver.irradiance0));
	float3 dstIrradiance1 = RGBMDecode(UnpackR8G8B8A8ToUFLOAT(receiver.irradiance1));
	float3 dstIrradiance2 = RGBMDecode(UnpackR8G8B8A8ToUFLOAT(receiver.irradiance2));

	float3 currentVal = _SrcLightmap[dstLocation].xyz;
	float3 newVal = currentVal + _Intensity0 * dstIrradiance0 + _Intensity1 * dstIrradiance1 + _Intensity2 * dstIrradiance2;
	_DstLightmap[dstLocation] = float4(newVal, 1.0f);
}
